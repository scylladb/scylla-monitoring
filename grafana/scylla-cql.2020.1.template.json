{
    "dashboard": {
        "class": "dashboard",
        "uid": "cql-2020-1",
        "originalTitle": "CQL",
        "rows": [
            {
                "class": "logo_row"
            },
            {
                "class": "row",
                "height": "25px",
                "gridPos": {"h": 2},
                "panels": [
                    {
                        "class": "text_panel",
                        "content": "<h1 style=\"color:#5881c2; border-bottom: 3px solid #5881c2;\">CQL By User - Coordinator</h1>",
                        "style": {}
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_inserts{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[300s])) by ([[by]]) - sum(irate(scylla_cql_inserts_per_ks{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\", who=\"internal\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Number of CQL INSERT commands generated by the user",
                        "title": "CQL Insert"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[300s])) by ([[by]]) - sum(irate(scylla_cql_reads_per_ks{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\", who=\"internal\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Number of CQL SELECT commands generated by the user",
                        "title": "CQL Reads"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_deletes{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[300s])) by ([[by]])-sum(irate(scylla_cql_deletes_per_ks{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\", who=\"internal\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Number of CQL DELETE commands generated by the user",
                        "title": "CQL Deletes"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_updates{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[300s])) by ([[by]])-sum(irate(scylla_cql_updates_per_ks{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\", who=\"internal\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Number of CQL UPDATE commands generated by the user",
                        "title": "CQL Updates"
                    },
                    {
                        "class": "graph_panel",
                        "span": 3,
                        "pointradius": 1,
                        "targets": [
                            {
                                "expr": "sum(scylla_transport_current_connections{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 30
                            }
                        ],
                        "title": "Client CQL connections by [[by]]",
                        "description": "amount of CQL connections currently established"
                    },
                    {
                        "class": "graph_panel",
                        "span": 3,
                        "pointradius": 1,
                        "targets": [
                            {
                                "expr": "sum(rate(scylla_cql_batches{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 30
                            }
                        ],
                        "title": "CQL Batches by [[by]]",
                        "description": "Number of CQL batches command, each batched command is counted once"
                    },
                    {
                        "class": "graph_panel",
                        "span": 3,
                        "pointradius": 1,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_statements_in_batches{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 30
                            }
                        ],
                        "title": "CQL Command In Batches by [[by]]",
                        "description": "Number of CQL command batched. Each batch would add the number of commands inside the batch"
                    },
                    {
                        "class": "ops_panel",
                        "description": "Counts the number of SELECT statements with BYPASS CACHE option",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(delta(scylla_cql_select_bypass_caches{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[1m])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "refId": "A"
                            }
                        ],
                        "title": "BYPASS CACHE"
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "height": "25px",
                "gridPos": {"h": 2},
                "panels": [
                    {
                        "class": "text_panel",
                        "content": "<h1 style=\"color:#5881c2; border-bottom: 3px solid #5881c2;\">CQL Internal - Coordinator</h1>",
                        "style": {}
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_inserts_per_ks{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\", who=\"internal\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Number of CQL INSERT commands generated by intenal operations",
                        "title": "CQL Internal Insert"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_reads_per_ks{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\", who=\"internal\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Number of CQL SELECT commands generated by intenal operations",
                        "title": "CQL Internal Reads"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_deletes_per_ks{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\", who=\"internal\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Number of CQL DELETE commands generated by intenal operations",
                        "title": "CQL Deletes"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_updates_per_ks{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\", who=\"internal\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Number of CQL UPDATE commands generated by intenal operations",
                        "title": "CQL Updates"
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "height": "25px",
                "gridPos": {"h": 2},
                "panels": [
                    {
                        "class": "text_panel",
                        "content": "<h1 style=\"color:#5881c2; border-bottom: 3px solid #5881c2;\">LWT</h1>",
                        "style": {}
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_inserts{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\", conditional=\"yes\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "CQL Insert"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_deletes{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\", conditional=\"yes\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "CQL Deletes"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_updates{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\", conditional=\"yes\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "CQL Updates"
                    },
                    {
                        "class": "graph_panel",
                        "span": 3,
                        "pointradius": 1,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_batches{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\", conditional=\"yes\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 30
                            }
                        ],
                        "title": "CQL Batches by [[by]]",
                        "description": "Number of CQL batches command, each batched command is counted once"
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "height": "25px",
                "gridPos": {"h": 2},
                "panels": [
                    {
                        "class": "text_panel",
                        "content": "<h1 style=\"color:#5881c2; border-bottom: 3px solid #5881c2;\">Optimization</h1>",
                        "style": {}
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "panels": [

                    {
                        "class": "gauge_errors_panel",
                        "description": "All of the requests should be prepared\n\nPrepared statements remove the overhead of parsing the query every time and allow optimal routing of requests from client to server",
                        "targets": [
                            {
                                "expr": "floor(100 *sum(rate(scylla_query_processor_statements_prepared{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) /(sum(rate(scylla_cql_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) + sum(rate(scylla_cql_inserts{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) + sum(rate(scylla_cql_updates{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) + sum(rate(scylla_cql_deletes{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])))) OR vector(0)",
                                "format": "time_series",
                                "hide": false,
                                "instant": false,
                                "interval": "",
                                "intervalFactor": 1,
                                "legendFormat": "aaa",
                                "refId": "A"
                            }
                        ],
                        "title": "CQL Non-Prepared Statements"
                    },
                    {
                        "class": "ops_panel",
                        "description": "All of the requests should be prepared\n",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_query_processor_statements_prepared{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "refId": "A"
                            }
                        ],
                        "title": "CQL Non-Prepared Statements"
                    },
                    {
                        "class": "gauge_errors_panel",
                        "description": "All requests should be paged\n\nNon Paged request sources:\n- Client modifying the fetch size\n\nNon Paged requests require reading all the results and returning them in a single request.",
                        "targets": [
                            {
                                "expr": "100 * (sum(rate(scylla_cql_unpaged_select_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s]))/sum(rate(scylla_cql_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s]))) OR vector(0)",
                                "format": "time_series",
                                "hide": false,
                                "instant": false,
                                "interval": "",
                                "intervalFactor": 1,
                                "legendFormat": "aaa",
                                "refId": "A"
                            }
                        ],
                        "title": "Non-Paged CQL Reads"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "description": "Non-Paged requests require reading all the results and returning them in a single request",
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_unpaged_select_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "refId": "A"
                            }
                        ],
                        "title": "Non-Paged CQL Reads"
                    },
                    {
                        "class": "gauge_errors_panel",
                        "description": "All of the requests should be Token Aware\n\nNon Token Aware requests sources:\n* Non-Prepared Stamements\n* Client not using a Token Aware load balancing policy\n\nTokenAware requests are sent to a Scylla node that is also a replica. Token Un-Aware requests require extra hop and additional processing.\n\nNote that the metric shows incorrect values when batches are used.",
                        "targets": [
                            {
                                "expr": "100 - floor(100*(sum(rate(scylla_storage_proxy_coordinator_reads_local_node{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) +sum(rate(scylla_storage_proxy_coordinator_total_write_attempts_local_node{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])))/(sum(rate(scylla_cql_inserts{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s]) + rate(scylla_cql_updates{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s]) + rate(scylla_cql_deletes{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s]) + rate(scylla_cql_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])))) OR vector(0)",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 1,
                                "legendFormat": "aaa",
                                "refId": "A"
                            }
                        ],
                        "title": "Non-Token Aware"
                    },
                    {
                        "class": "ops_panel",
                        "description": "Requests that are not token aware indicates that requests are not routed to the right node, which require extra hop and additional processing.\n\nNote that the metric shows incorrect values when batches are used.",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]]) - sum(irate(scylla_storage_proxy_coordinator_reads_local_node{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]]) + sum(irate(scylla_cql_inserts{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s]) + irate(scylla_cql_updates{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s]) + irate(scylla_cql_deletes{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]]) - sum(irate(scylla_storage_proxy_coordinator_total_write_attempts_local_node{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])\n",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "refId": "A"
                            }
                        ],
                        "title": "Non-Token Aware Queries"
                    }
                    ],
                "title": "New row"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "gauge_errors_panel",
                        "description": "Reversed CQL Reads entail additional processing on server side\n\nSources: CQL Read requests with ORDER BY that is different from the \"CLUSTERING ORDER BY\" of the table\nAlternatives:\n\n* Denormalize your data (use a Materialized View)",
                        "targets": [
                            {
                                "expr": "100 * sum(rate(scylla_cql_reverse_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) / sum(rate(scylla_cql_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) OR vector(0)",
                                "format": "time_series",
                                "hide": false,
                                "instant": false,
                                "interval": "",
                                "intervalFactor": 1,
                                "legendFormat": "aaa",
                                "refId": "A"
                            }
                        ],
                        "title": "Reversed CQL Reads"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "description": "Reversed CQL Reads entail additional processing on server side and should be avoided",
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_reverse_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "refId": "A"
                            }
                        ],
                        "title": "Reversed CQL Reads"
                    },
                    {
                        "class": "gauge_errors_panel",
                        "description": "ALLOW FILTERING CQL Reads, the percentage of read requests with 'ALLOW FILTERING'\n\nALLOW FILTERING CQL Reads entail additional processing on server side\n\nSources: CQL Read requests with \"ALLOW FILTERING\"\n\nALLOW FILTERING should be used when large parts of the filtered data is returned - check \n\"ALLOW FILTERING CQL Read Filtered Rows to check what percentage of the data is used\"\n\nAlternatives:\n- Use a Secondary Index\n- Denormalize your data (use a Materialized View)",
                        "targets": [
                            {
                                "expr": "100 * sum(rate(scylla_cql_filtered_read_requests{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) / sum(rate(scylla_cql_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) OR vector(0)",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 1,
                                "legendFormat": "aaa",
                                "refId": "A"
                            }
                        ],
                        "title": "ALLOW FILTERING CQL Reads"
                    },
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "description": "Read requests with ALLOW FILTERING\n\nALLOW FILTERING CQL Reads entail additional processing on server side and should be avoided",
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_filtered_read_requests{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "refId": "A"
                            }
                        ],
                        "title": "ALLOW FILTERING CQL Reads"
                    },
                    {
                        "class": "gauge_errors_panel",
                        "description": "ALLOW FILTERING Filtered rows, the percentage of rows that were read and then filtered.\n\nALLOW FILTERING CQL Reads entail additional processing on server side. \nReading a row and then filter it is a waste of resources.\n\nSources: CQL Read requests with \"ALLOW FILTERING\"\n\nALLOW FILTERING should be used when large parts of the filtered data is returned\n\nAlternatives:\n- Use a Secondary Index\n- Denormalize your data (use a Materialized View)",
                        "targets": [
                            {
                                "expr": "100 * sum(rate(scylla_cql_filtered_rows_dropped_total{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s]))  /sum(rate(scylla_cql_filtered_rows_read_total{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) OR vector(0)",
                                "format": "time_series",
                                "hide": false,
                                "instant": false,
                                "interval": "",
                                "intervalFactor": 1,
                                "legendFormat": "aaa",
                                "refId": "A"
                            }
                        ],
                        "title": "ALLOW FILTERING Filtered Rows"
                    },
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "description": "CQL Queries with ALLOW FILTERING should be avoided.\nDropped rows are rows that were read but were filtered by the server.\nWhen dropped rows is relatively high you should consider the alternatives",
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_filtered_rows_read_total{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "legendFormat": "rows read $node $shard",
                                "refId": "A"
                            },
                            {
                                "expr": "sum(irate(scylla_cql_filtered_rows_matched_total{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "interval": "",
                                "intervalFactor": 2,
                                "legendFormat": "rows matched $node $shard",
                                "refId": "B"
                            },
                            {
                                "expr": "sum(irate(scylla_cql_filtered_rows_dropped_total{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "format": "time_series",
                                "intervalFactor": 2,
                                "legendFormat": "rows dropped $node $shard",
                                "refId": "C"
                            }
                        ],
                        "title": "ALLOW FILTERING CQL Read Filtering"
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "gauge_errors_panel",
                        "description": "Using consistency level ANY in a query may hurt persistency, if the node receiving the request will fail the data may be lost",
                        "targets": [
                            {
                                "expr": "floor(100 *sum(delta(scylla_query_processor_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\", consistency_level=\"ANY\"}[60s]))/sum(delta(scylla_query_processor_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s]))) OR vector(0)",
                                "format": "time_series",
                                "hide": false,
                                "instant": false,
                                "interval": "",
                                "intervalFactor": 1,
                                "legendFormat": "aaa",
                                "refId": "A"
                            }
                        ],
                        "title": "CQL ANY Queries"
                    },
                    {
                        "class": "ops_panel",
                        "description": "Using consistency level ANY in a query may hurt persistency, if the node receiving the request will fail the data may be lost",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(delta(scylla_query_processor_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\",  consistency_level=\"ANY\"}[1m])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "refId": "A"
                            }
                        ],
                        "title": "CQL ANY CL Queries"
                    },
                    {
                        "class": "gauge_errors_panel",
                        "description": "Using consistency level ALL in a query may hurt availability, if a node is unavailable operations will fail",
                        "targets": [
                            {
                                "expr": "floor(100 *sum(delta(scylla_query_processor_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\", consistency_level=\"ALL\"}[60s]))/sum(delta(scylla_query_processor_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s]))) OR vector(0)",
                                "format": "time_series",
                                "hide": false,
                                "instant": false,
                                "interval": "",
                                "intervalFactor": 1,
                                "legendFormat": "aaa",
                                "refId": "A"
                            }
                        ],
                        "title": "CQL ALL CL Queries"
                    },
                    {
                        "class": "ops_panel",
                        "description": "Using consistency level ALL in a query may hurt availability, if a node is unavailable operations will fail",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(delta(scylla_query_processor_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\",  consistency_level=\"ALL\"}[1m])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "refId": "A"
                            }
                        ],
                        "title": "CQL ALL CL Queries"
                    }

                ]
            },
            {
                "class": "row",
                "height": "25px",
                "gridPos": {"h": 2},
                "panels": [
                    {
                        "class": "text_panel",
                        "content": "<h1 style=\"color:#5881c2; border-bottom: 3px solid #5881c2;\">Cross DC Information</h1>",
                        "style": {}
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "gauge_errors_panel",
                        "description": "Using consistency level ONE in a query when there is more than one DC may hurt performance, queries may end in the non-local DC. Use LOCAL_ONE instead",
                        "targets": [
                            {
                                "expr": "floor(100 *sum(delta(scylla_query_processor_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\", consistency_level=\"ONE\"}[60s]))/sum(delta(scylla_query_processor_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s]))) OR vector(0)",
                                "format": "time_series",
                                "hide": false,
                                "instant": false,
                                "interval": "",
                                "intervalFactor": 1,
                                "legendFormat": "aaa",
                                "refId": "A"
                            }
                        ],
                        "title": "CQL ONE Queries"
                    },
                    {
                        "class": "ops_panel",
                        "description": "Using consistency level ONE in a query when there is more than one DC may hurt performance, queries may end in the non-local DC. Use LOCAL_ONE instead",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(delta(scylla_query_processor_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\",  consistency_level=\"ONE\"}[1m])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "refId": "A"
                            }
                        ],
                        "title": "CQL ONE CL Queries"
                    },
                    {
                        "class": "gauge_errors_panel",
                        "description": "Using consistency level QUORUM in a query when there is more than one DC may hurt performance, queries may end in the non-local DC. Use LOCAL_QUORUM instead",
                        "targets": [
                            {
                                "expr": "floor(100 *sum(delta(scylla_query_processor_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\", consistency_level=\"QUORUM\"}[60s]))/sum(delta(scylla_query_processor_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s]))) OR vector(0)",
                                "format": "time_series",
                                "hide": false,
                                "instant": false,
                                "interval": "",
                                "intervalFactor": 1,
                                "legendFormat": "aaa",
                                "refId": "A"
                            }
                        ],
                        "title": "CQL QUORUM CL Queries"
                    },
                    {
                        "class": "ops_panel",
                        "description": "Using consistency level QUORUM in a query when there is more than one DC may hurt performance, queries may end in the non-local DC. Use LOCAL_QUORUM instead",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(delta(scylla_query_processor_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\",  consistency_level=\"QUORUM\"}[1m])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "refId": "A"
                            }
                        ],
                        "title": "CQL QUORUM CL Queries"
                    }

                ]
            },
            {
                "class": "row",
                "panels": [
                {
                        "class": "gauge_errors_panel",
                        "repeat": "dc",
                        "span": 2,
                        "description": "Cross DC traffic may cause additional latencies and network loads and in most cases, should be avoided.\n\nCross DC Read requests sources:\n- Consistency Level that is not LOCAL_XXX\n- Tables with read_repair_chance > 0\n\nNote:\n- If requests are supposed to be  DC local - verify client is using a DCAware policy and a LOCAL_XX consistency level",
                        "targets": [
                            {
                                "expr": "100*(sum(rate(scylla_storage_proxy_coordinator_reads_remote_node{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) - sum(rate(scylla_storage_proxy_coordinator_reads_remote_node{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", datacenter=~\"$dc\", shard=~\"[[shard]]\"}[60s])))/sum(rate(scylla_storage_proxy_coordinator_reads_remote_node{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) OR vector(0)",
                                "format": "time_series",
                                "intervalFactor": 1,
                                "refId": "A"
                            }
                        ],
                        "title": "Cross DC read requests $dc"
                    }
                ]
            }
        ],
        "tags": [
            "2020.1"
        ],
        "templating": {
            "list": [
                {
                    "class":"by_template_var"
                },
                {
                    "class": "template_variable_single",
                    "label": "cluster",
                    "name": "cluster",
                    "query": "label_values(scylla_reactor_utilization, cluster)"
                },
                {
                    "class": "template_variable_all",
                    "label": "dc",
                    "name": "dc",
                    "query": "label_values(scylla_reactor_utilization{cluster=~\"$cluster\"}, dc)"
                },
                {
                    "class": "template_variable_all",
                    "label": "node",
                    "name": "node",
                    "query": "label_values(scylla_reactor_utilization{cluster=~\"$cluster|$^\", dc=~\"$dc\"}, instance)"
                },
                {
                    "class": "template_variable_all",
                    "label": "shard",
                    "name": "shard",
                    "query": "label_values(scylla_reactor_utilization,shard)",
                    "sort": 3
                },
                {
                    "class": "adhoc_filter"
                },
                {
                    "class": "template_variable_custom",
                    "current": {
                        "text": "2020.1",
                        "value": "2020.1"
                    },
                    "name": "dash_version",
                    "options": [
                        {
                            "selected": true,
                            "text": "2020.1",
                            "value": "2020.1"
                        }
                    ],
                    "query": "2020.1"
                },
                {
                    "class": "template_variable_custom",
                    "current": {
                        "text": "2020.1",
                        "value": "2020.1"
                    },
                    "name": "scylla_dash_version",
                    "options": [
                        {
                            "selected": true,
                            "text": "2020.1",
                            "value": "2020.1"
                        }
                    ],
                    "query": "2020.1"
                },
                {
                    "class": "monitor_version_var"
                }
            ]
        },
        "time": {
            "from": "now-5m",
            "to": "now"
        },
        "annotations" :{
            "list": [
              {
                "builtIn": 1,
                "datasource": "-- Grafana --",
                "enable": true,
                "hide": true,
                "iconColor": "rgba(0, 211, 255, 1)",
                "name": "Annotations & Alerts",
                "type": "dashboard"
              },
              {
                "class" : "annotation_restart"
              },
              {
                "class" : "annotation_stall"
              },
              {
              "class" : "annotation_schema_changed"
              }
            ]
        },
        "overwrite": true,
        "title": "Scylla CQL"
    }
}
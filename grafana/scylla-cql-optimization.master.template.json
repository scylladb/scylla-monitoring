{
    "dashboard": {
        "class": "dashboard",
        "uid": "cqlopt-master",
        "originalTitle": "Scylla CQL Optimization",
        "rows": [
            {
                "class": "logo_row"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "single_stat_panel",
                        "targets": [
                            {
                                "expr": "count(up{job=\"scylla\", cluster=~\"$cluster|$^\"})",
                                "intervalFactor": 1,
                                "legendFormat": "Total Nodes",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Total Nodes"
                    },
                    {
                        "class": "single_stat_panel_fail",
                        "targets": [
                            {
                                "expr": "count(scrape_samples_scraped{job=\"scylla\", cluster=~\"$cluster|$^\"}==0) OR vector(0)",
                                "intervalFactor": 1,
                                "legendFormat": "Unreachable",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "thresholds": "1,2",
                        "title": "Unreachable"
                    },
                    {
                        "class": "single_stat_panel_fail",
                        "description": "Number of nodes that reported their status as Starting or Joining",
                        "targets": [
                            {
                                "expr": "count(scylla_node_operation_mode==1) +  count(scylla_node_operation_mode==2)OR vector(0)",
                                "intervalFactor": 1,
                                "legendFormat": "Joining",
                                "refId": "A",
                                "step": 20
                            }
                        ],
                        "thresholds": "1,2",
                        "title": "Joining"
                    },
                    {
                        "class": "single_stat_panel_fail",
                        "description": "Number of nodes that reported their status as  Leaving, Decommissioned, Draining or Drained",
                        "targets": [
                            {
                                "expr": "count(scylla_node_operation_mode>3)OR vector(0)",
                                "intervalFactor": 1,
                                "legendFormat": "Leaving",
                                "refId": "A",
                                "step": 20
                            }
                        ],
                        "thresholds": "1,2",
                        "title": "Leaving"
                    },
                    {
                      "class":"plain_text",
                      "content": "<span/>",
                      "span":2
                    },
                    {
                        "class": "ops_panel",
                        "description": "Total requests served by a coordinator",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_transport_requests_served{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) by ([[by]]) + sum(irate(scylla_thrift_served{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) by ([[by]])",
                                "intervalFactor": 1,
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Total Requests - Coordinator"
                    },
                    {
                        "class": "ops_panel",
                        "description": "Total CQL Commands",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_inserts{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[300s])) by ([[by]]) + sum(irate(scylla_cql_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[300s])) by ([[by]]) + sum(irate(scylla_cql_deletes{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[300s])) by ([[by]]) + sum(irate(scylla_cql_updates{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Total CQL Commands"
                    }
                ],
                "title": "Node status"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_inserts{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "CQL Insert"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "CQL Reads"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_deletes{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "CQL Deletes"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_updates{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[300s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "CQL Updates"
                    }
                ],
                "title": "Node status"
            },
            {
                "class": "row",
                "height": "25px",
                "gridPos": {"h": 2},
                "panels": [
                    {
                        "class": "plain_text",
                        "content": "<h1 style=\"color:#5881c2; border-bottom: 3px solid #5881c2;\">Potential Issues</h1>"
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "gauge_errors_panel",
                        "description": "All of the requests should be prepared\n\nPrepared statements remove the overhead of parsing the query every time and allow optimal routing of requests from client to server",
                        "targets": [
                            {
                                "expr": "floor(100 *sum(irate(scylla_query_processor_statements_prepared{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) /(sum(irate(scylla_cql_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) + sum(irate(scylla_cql_inserts{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) + sum(irate(scylla_cql_updates{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) + sum(irate(scylla_cql_deletes{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])))) OR vector(0)",
                                "format": "time_series",
                                "hide": false,
                                "instant": false,
                                "interval": "",
                                "intervalFactor": 1,
                                "legendFormat": "aaa",
                                "refId": "A"
                            }
                        ],
                        "title": "CQL Non-Prepared Statements"
                    },
                    {
                        "class": "ops_panel",
                        "description": "All of the requests should be prepared\n",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_query_processor_statements_prepared{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "refId": "A"
                            }
                        ],
                        "title": "CQL Non-Prepared Statements"
                    },
                    {
                        "class": "gauge_errors_panel",
                        "description": "All requests should be paged\n\nNon Paged request sources:\n- Client modifying the fetch size\n\nNon Paged requests require reading all the results and returning them in a single request.",
                        "targets": [
                            {
                                "expr": "100 * (sum(irate(scylla_cql_unpaged_select_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s]))/sum(irate(scylla_cql_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s]))) OR vector(0)",
                                "format": "time_series",
                                "hide": false,
                                "instant": false,
                                "interval": "",
                                "intervalFactor": 1,
                                "legendFormat": "aaa",
                                "refId": "A"
                            }
                        ],
                        "title": "Non-Paged CQL Reads"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "description": "Non-Paged requests require reading all the results and returning them in a single request",
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_unpaged_select_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "refId": "A"
                            }
                        ],
                        "title": "Non-Paged CQL Reads"
                    },
                    {
                        "class": "gauge_errors_panel",
                        "description": "All of the requests should be Token Aware\n\nNon Token Aware requests sources:\n* Non-Prepared Stamements\n* Client not using a Token Aware load balancing policy\n\nTokenAware requests are sent to a Scylla node that is also a replica. Token Un-Aware requests require extra hop and additional processing.\n\nNote that the metric shows incorrect values when batches are used.",
                        "targets": [
                            {
                                "expr": "100 - floor(100*(sum(irate(scylla_storage_proxy_coordinator_reads_local_node{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) +sum(irate(scylla_storage_proxy_coordinator_total_write_attempts_local_node{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])))/(sum(irate(scylla_cql_inserts{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s]) + irate(scylla_cql_updates{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s]) + irate(scylla_cql_deletes{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s]) + irate(scylla_cql_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])))) OR vector(0)",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 1,
                                "legendFormat": "aaa",
                                "refId": "A"
                            }
                        ],
                        "title": "Non-Token Aware"
                    },
                    {
                        "class": "ops_panel",
                        "description": "Requests that are not token aware indicates that requests are not routed to the right node, which require extra hop and additional processing.\n\nNote that the metric shows incorrect values when batches are used.",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) by ([[by]]) - sum(irate(scylla_storage_proxy_coordinator_reads_local_node{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) by ([[by]]) + sum(irate(scylla_cql_inserts{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s]) + irate(scylla_cql_updates{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s]) + irate(scylla_cql_deletes{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) by ([[by]]) - sum(irate(scylla_storage_proxy_coordinator_total_write_attempts_local_node{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) by ([[by]])\n",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "refId": "A"
                            }
                        ],
                        "title": "Non-Token Aware Queries"
                    }
                    ],
                "title": "New row"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "gauge_errors_panel",
                        "description": "Reversed CQL Reads entail additional processing on server side\n\nSources: CQL Read requests with ORDER BY that is different from the \"CLUSTERING ORDER BY\" of the table\nAlternatives:\n\n* Denormalize your data (use a Materialized View)",
                        "targets": [
                            {
                                "expr": "100 * sum(irate(scylla_cql_reverse_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) / sum(irate(scylla_cql_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) OR vector(0)",
                                "format": "time_series",
                                "hide": false,
                                "instant": false,
                                "interval": "",
                                "intervalFactor": 1,
                                "legendFormat": "aaa",
                                "refId": "A"
                            }
                        ],
                        "title": "Reversed CQL Reads"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "description": "Reversed CQL Reads entail additional processing on server side and should be avoided",
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_reverse_queries{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "refId": "A"
                            }
                        ],
                        "title": "Reversed CQL Reads"
                    },
                    {
                        "class": "gauge_errors_panel",
                        "description": "ALLOW FILTERING CQL Reads, the percentage of read requests with 'ALLOW FILTERING'\n\nALLOW FILTERING CQL Reads entail additional processing on server side\n\nSources: CQL Read requests with \"ALLOW FILTERING\"\n\nALLOW FILTERING should be used when large parts of the filtered data is returned - check \n\"ALLOW FILTERING CQL Read Filtered Rows to check what percentage of the data is used\"\n\nAlternatives:\n- Use a Secondary Index\n- Denormalize your data (use a Materialized View)",
                        "targets": [
                            {
                                "expr": "100 * sum(irate(scylla_cql_filtered_read_requests{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) / sum(irate(scylla_cql_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) OR vector(0)",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 1,
                                "legendFormat": "aaa",
                                "refId": "A"
                            }
                        ],
                        "title": "ALLOW FILTERING CQL Reads"
                    },
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "description": "Read requests with ALLOW FILTERING\n\nALLOW FILTERING CQL Reads entail additional processing on server side and should be avoided",
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_filtered_read_requests{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "refId": "A"
                            }
                        ],
                        "title": "ALLOW FILTERING CQL Reads"
                    },
                    {
                        "class": "gauge_errors_panel",
                        "description": "ALLOW FILTERING Filtered rows, the percentage of rows that were read and then filtered.\n\nALLOW FILTERING CQL Reads entail additional processing on server side. \nReading a row and then filter it is a waste of resources.\n\nSources: CQL Read requests with \"ALLOW FILTERING\"\n\nALLOW FILTERING should be used when large parts of the filtered data is returned\n\nAlternatives:\n- Use a Secondary Index\n- Denormalize your data (use a Materialized View)",
                        "targets": [
                            {
                                "expr": "100 * sum(irate(scylla_cql_filtered_rows_dropped_total{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s]))  /sum(irate(scylla_cql_filtered_rows_read_total{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) OR vector(0)",
                                "format": "time_series",
                                "hide": false,
                                "instant": false,
                                "interval": "",
                                "intervalFactor": 1,
                                "legendFormat": "aaa",
                                "refId": "A"
                            }
                        ],
                        "title": "ALLOW FILTERING Filtered Rows"
                    },
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "description": "CQL Queries with ALLOW FILTERING should be avoided.\nDropped rows are rows that were read but were filtered by the server.\nWhen dropped rows is relatively high you should consider the alternatives",
                        "targets": [
                            {
                                "expr": "sum(irate(scylla_cql_filtered_rows_read_total{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "legendFormat": "rows read $node $shard",
                                "refId": "A"
                            },
                            {
                                "expr": "sum(irate(scylla_cql_filtered_rows_matched_total{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "interval": "",
                                "intervalFactor": 2,
                                "legendFormat": "rows matched $node $shard",
                                "refId": "B"
                            },
                            {
                                "expr": "sum(irate(scylla_cql_filtered_rows_dropped_total{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) by ([[by]])",
                                "format": "time_series",
                                "intervalFactor": 2,
                                "legendFormat": "rows dropped $node $shard",
                                "refId": "C"
                            }
                        ],
                        "title": "ALLOW FILTERING CQL Read Filtering"
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "panels": [
                {
                        "class": "gauge_errors_panel",
                        "repeat": "dc",
                        "span": 2,
                        "description": "Cross DC traffic may cause additional latencies and network loads and in most cases, should be avoided.\n\nCross DC Read requests sources:\n- Consistency Level that is not LOCAL_XXX\n- Tables with read_repair_chance > 0\n\nNote:\n- If requests are supposed to be  DC local - verify client is using a DCAware policy and a LOCAL_XX consistency level",
                        "targets": [
                            {
                                "expr": "100*(sum(irate(scylla_storage_proxy_coordinator_reads_remote_node{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) - sum(irate(scylla_storage_proxy_coordinator_reads_remote_node{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", datacenter=~\"$dc\", shard=~\"[[shard]]\"}[30s])))/sum(irate(scylla_storage_proxy_coordinator_reads_remote_node{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[30s])) OR vector(0)",
                                "format": "time_series",
                                "intervalFactor": 1,
                                "refId": "A"
                            }
                        ],
                        "title": "Cross DC read requests $dc"
                    }
                ]
            }
        ],
        "tags": [
            "master"
        ],
        "templating": {
            "list": [
                {
                    "class":"by_template_var"
                },
                {
                    "class": "template_variable_single",
                    "label": "cluster",
                    "name": "cluster",
                    "query": "label_values(scylla_reactor_utilization, cluster)"
                },
                {
                    "class": "template_variable_all",
                    "label": "dc",
                    "name": "dc",
                    "query": "label_values(scylla_reactor_utilization{cluster=~\"$cluster\"}, dc)"
                },
                {
                    "class": "template_variable_all",
                    "label": "node",
                    "name": "node",
                    "query": "label_values(scylla_reactor_utilization{cluster=~\"$cluster|$^\", dc=~\"$dc\"}, instance)"
                },
                {
                    "class": "template_variable_all",
                    "label": "shard",
                    "name": "shard",
                    "query": "label_values(scylla_reactor_utilization,shard)",
                    "sort": 3
                },
                {
                    "class": "template_variable_custom",
                    "current": {
                        "text": "master",
                        "value": "master"
                    },
                    "name": "dash_version",
                    "options": [
                        {
                            "selected": true,
                            "text": "master",
                            "value": "master"
                        }
                    ],
                    "query": "master"
                }
            ]
        },
        "time": {
            "from": "now-5m",
            "to": "now"
        },
        "overwrite": true,
        "title": "Scylla CQL Optimization"
    }
}
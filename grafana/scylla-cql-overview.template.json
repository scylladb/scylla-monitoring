{
    "dashboard": {
        "class": "dashboard",
        "originalTitle": "Scylla Cluster Metrics",
        "overwrite": true,
        "rows": [
            
            {
                "class": "row",
                "panels": [
                    {
                      "collapsed": false,
                      "datasource": null,
                      "id": "auto",
                      "gridPos": {
                        "h": 1,
                        "w": 24
                      },
                      "panels": [],
                      "title": "Cluster overview $cluster",
                      "type": "row"
                    }
                ]
            },
            {
                "class":"row",
                  "height":"200px",
                  "panels":[
                  {
            "class":"small_stat",
            "targets":[
               {
                  "expr":"sum(rate(scylla_transport_requests_served{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[60s])) + (sum(rate(scylla_thrift_served{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[60s])) or on() vector(0))",
                  "intervalFactor":1,
                  "refId":"A",
                  "instant":true,
                  "step":40
               }
            ],
            "gridPos":{
               "w":3,
               "h":4
            },
            "fieldConfig":{
               "defaults":{
                  "custom":{
                  },
                  "unit":"si:",
                  "decimals":1,
                  "thresholds":{
                     "mode":"absolute",
                     "steps":[
                        {
                           "color":"green",
                           "value":null
                        }
                     ]
                  },
                  "mappings":[]
               },
               "overrides":[]
            },
            "title":"Requests/s"
         },
         {
            "class":"small_stat",
            "description":"Average Write Latency",
            "fieldConfig":{
               "defaults":{
                  "custom":{
                  },
                  "unit":"\u00b5s",
                  "decimals":0,
                  "thresholds":{
                     "mode":"absolute",
                     "steps":[
                        {
                           "color":"green",
                           "value":null
                        },
                        {
                           "color":"red",
                           "value":50000
                        }
                     ]
                  },
                  "mappings":[]
               },
               "overrides":[]
            },
            "targets":[
               {
                  "expr":"avg(wlatencya{by=\"cluster\", cluster=~\"$cluster|^$\",scheduling_group_name!=\"streaming\"}>0)",
                  "intervalFactor":1,
                  "legendFormat":"",
                  "refId":"A",
                  "instant":true,
                  "step":4
               }
            ],
            "title":"Avg Write"
         },
         {
            "class":"small_stat",
            "description":"99% write Latency",
            "fieldConfig":{
               "defaults":{
                  "custom":{
                  },
                  "unit":"\u00b5s",
                  "decimals":0,
                  "thresholds":{
                     "mode":"absolute",
                     "steps":[
                        {
                           "color":"green",
                           "value":null
                        },
                        {
                           "color":"red",
                           "value":100000
                        }
                     ]
                  },
                  "mappings":[]
               },
               "overrides":[]
            },
            "targets":[
               {
                  "expr":"avg(wlatencyp95{by=\"cluster\", cluster=~\"$cluster|^$\",scheduling_group_name!=\"streaming\"}>0)",
                  "intervalFactor":1,
                  "legendFormat":"",
                  "refId":"A",
                  "instant":true,
                  "step":4
               }
            ],
            "title":"95% Write"
         },
         {
            "class":"small_stat",
            "description":"99% write Latency",
            "fieldConfig":{
               "defaults":{
                  "custom":{
                  },
                  "unit":"\u00b5s",
                  "decimals":0,
                  "thresholds":{
                     "mode":"absolute",
                     "steps":[
                        {
                           "color":"green",
                           "value":null
                        },
                        {
                           "color":"red",
                           "value":100000
                        }
                     ]
                  },
                  "mappings":[]
               },
               "overrides":[]
            },
            "targets":[
               {
                  "expr":"avg(wlatencyp99{by=\"cluster\", cluster=~\"$cluster|^$\",scheduling_group_name!=\"streaming\"}>0)",
                  "intervalFactor":1,
                  "legendFormat":"",
                  "refId":"A",
                  "instant":true,
                  "step":4
               }
            ],
            "title":"99% Write"
         },
         {
            "class":"small_stat",
            "description":"Average Read Latency",
            "fieldConfig":{
               "defaults":{
                  "custom":{
                  },
                  "unit":"\u00b5s",
                  "decimals":0,
                  "thresholds":{
                     "mode":"absolute",
                     "steps":[
                        {
                           "color":"green",
                           "value":null
                        },
                        {
                           "color":"red",
                           "value":50000
                        }
                     ]
                  },
                  "mappings":[]
               },
               "overrides":[]
            },
            "targets":[
               {
                  "expr":"avg(rlatencya{by=\"cluster\", cluster=~\"$cluster|^$\",scheduling_group_name!=\"streaming\"}>0)",
                  "intervalFactor":1,
                  "legendFormat":"",
                  "instant":true,
                  "refId":"A",
                  "step":4
               }
            ],
            "title":"Avg Read"
         },
         {
            "class":"small_stat",
            "description":"99% read Latency",
            "fieldConfig":{
               "defaults":{
                  "custom":{
                  },
                  "unit":"\u00b5s",
                  "decimals":0,
                  "thresholds":{
                     "mode":"absolute",
                     "steps":[
                        {
                           "color":"green",
                           "value":null
                        },
                        {
                           "color":"red",
                           "value":100000
                        }
                     ]
                  },
                  "mappings":[]
               },
               "overrides":[]
            },
            "targets":[
               {
                  "expr":"avg(rlatencyp95{by=\"cluster\", cluster=~\"$cluster|^$\",scheduling_group_name!=\"streaming\"}>0)",
                  "intervalFactor":1,
                  "legendFormat":"",
                  "refId":"A",
                  "instant":true,
                  "step":4
               }
            ],
            "title":"95% Read"
         },
         {
            "class":"small_stat",
            "description":"99% read Latency",
            "fieldConfig":{
               "defaults":{
                  "custom":{
                  },
                  "unit":"\u00b5s",
                  "decimals":0,
                  "thresholds":{
                     "mode":"absolute",
                     "steps":[
                        {
                           "color":"green",
                           "value":null
                        },
                        {
                           "color":"red",
                           "value":100000
                        }
                     ]
                  },
                  "mappings":[]
               },
               "overrides":[]
            },
            "targets":[
               {
                  "expr":"avg(rlatencyp99{by=\"cluster\", cluster=~\"$cluster|^$\",scheduling_group_name!=\"streaming\"}>0)",
                  "intervalFactor":1,
                  "legendFormat":"",
                  "refId":"A",
                  "instant":true,
                  "step":4
               }
            ],
            "title":"99% Read"
         },
         
         {
            "class":"small_stat",
            "description":"The percentage of the time during which Scylla utilized the CPU. Note that because Scylla does busy polling for some time before going idle, CPU utilization as seen by the operating system may be much higher. Your system is not yet CPU-bottlenecked until this metric is high.",
            "fieldConfig":{
               "defaults":{
                  "custom":{
                  },
                  "decimals":0,
                  "mappings":[],
                  "thresholds":{
                     "mode":"absolute",
                     "steps":[
                        {
                           "color":"green",
                           "value":null
                        },
                        {
                           "color":"red",
                           "value":80
                        }
                     ]
                  },
                  "unit":"percent"
               },
               "overrides":[]
            },
            "targets":[
               {
                  "expr":"avg(scylla_reactor_utilization{cluster=~\"$cluster|$^\", dc=~\"$dc\"} )",
                  "intervalFactor":1,
                  "legendFormat":"",
                  "refId":"A",
                  "instant":true,
                  "step":4
               }
            ],
            "title":"Load"
         },
         {
            "class":"small_stat",
            "fieldConfig":{
               "defaults":{
                  "custom":{
                  },
                  "thresholds":{
                     "mode":"absolute",
                     "steps":[
                        {
                           "color":"green",
                           "value":null
                        },
                        {
                           "color":"red",
                           "value":1
                        }
                     ]
                  },
                  "mappings":[]
               },
               "overrides":[]
            },
            "targets":[
               {
                  "expr": "$func(rate(scylla_database_total_reads_failed{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]])",
                  "intervalFactor":1,
                  "refId":"A",
                  "instant":true,
                  "step":40
               }
            ],
            "title":"R Failed"
         },
         {
            "class":"small_stat",
            "fieldConfig":{
               "defaults":{
                  "custom":{
                  },
                  "thresholds":{
                     "mode":"absolute",
                     "steps":[
                        {
                           "color":"green",
                           "value":null
                        },
                        {
                           "color":"red",
                           "value":1
                        }
                     ]
                  },
                  "mappings":[]
               },
               "overrides":[]
            },
            "targets":[
               {
                  "expr": "$func(rate(scylla_database_total_writes_failed{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]])",
                  "intervalFactor":1,
                  "refId":"A",
                  "instant":true,
                  "step":40
               }
            ],
            "title":"W Failed"
         },
         {
            "class":"small_stat",
            "fieldConfig":{
               "defaults":{
                  "custom":{
                  },
                  "thresholds":{
                     "mode":"absolute",
                     "steps":[
                        {
                           "color":"green",
                           "value":null
                        },
                        {
                           "color":"red",
                           "value":1
                        }
                     ]
                  },
                  "mappings":[]
               },
               "overrides":[]
            },
            "targets":[
               {
                  "expr":"sum(rate(scylla_storage_proxy_coordinator_write_timeouts{cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]|$^\"}[1m]))",
                  "intervalFactor":1,
                  "refId":"A",
                  "instant":true,
                  "step":40
               }
            ],
            "title":"Timeouts"
         }
      ],
      "title":"New row"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "alert_table",
                        "span": 4,
                        "title": "Active Alerts"
                    },
                    {
                        "class": "ops_panel",
                        "span": 2,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_storage_proxy_coordinator_write_latency_count{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m]))",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Write attempts - include all writes that reached the coordinator node, even if they will eventually fail",
                        "title": "Writes"
                    },
                    {
                        "class": "us_panel",
                        "span": 2,
                        "targets": [
                            {
                                "expr": "avg(wlatencyp95{by=\"cluster\", cluster=~\"$cluster|$^\",scheduling_group_name!=\"streaming\"}>0)",
                                "intervalFactor": 1,
                                "legendFormat": "95%",
                                "refId": "A",
                                "step": 1
                            },
                            {
                                "expr": "avg(wlatencyp99{by=\"cluster\", cluster=~\"$cluster|$^\",scheduling_group_name!=\"streaming\"}>0)",
                                "intervalFactor": 1,
                                "legendFormat": "99%",
                                "refId": "B",
                                "step": 1
                            }
                        ],
                        "legend": {
                            "class": "show_legend"
                        },
                        "title": "Write Latencies"
                    },
                    {
                        "class": "ops_panel",
                        "span": 2,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_storage_proxy_coordinator_read_latency_count{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m]))",
                                "intervalFactor": 1,
                                "legendFormat": "Reads",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Read attempts - include all reads that reached the coordinator node, even if they will eventually fail",
                        "title": "Reads"
                    },
                    {
                        "class": "us_panel",
                        "span": 2,
                        "targets": [
                            {
                                "expr": "avg(rlatencyp95{by=\"cluster\", cluster=~\"$cluster|$^\",scheduling_group_name!=\"streaming\"}>0)",
                                "intervalFactor": 1,
                                "legendFormat": "95%",
                                "refId": "A",
                                "step": 1
                            },
                            {
                                "expr": "avg(rlatencyp99{by=\"cluster\", cluster=~\"$cluster|$^\",scheduling_group_name!=\"streaming\"}>0)",
                                "intervalFactor": 1,
                                "legendFormat": "99%",
                                "refId": "B",
                                "step": 1
                            }
                        ],
                        "legend": {
                            "class": "show_legend"
                        },
                        "title": "Read Latencies"
                    }
                ]
            },
            {
                "class": "row",
                "panels": [
                    {
                      "collapsed": false,
                      "datasource": null,
                      "id": "auto",
                      "gridPos": {
                        "h": 1,
                        "w": 24
                      },
                      "panels": [],
                      "title": "",
                      "type": "row"
                    }
                ]
            },
            {
                "class": "header_row",
                "panels": [
                    {
                        "class": "plain_text",
                        "content": "<h1 style=\"color:#5780C1; border-bottom: 3px solid #5780C1;\">Advisor</h1>"
                    }
                ],
                "title": "New row"
            },
            {
            "class":"row",
            "panels": [
                {
                  "type": "text",
                  "title": "",
                  "gridPos": {
                                "h": 2,
                                "w": 12,
                                "x": 12,
                                "y": 14
                            },
                  "id": "auto",
                  "targets": [
                     {
                      "refId": "A",
                      "queryType": "randomWalk"
                    }
                  ],
                  "options": {
                    "mode": "html",
                    "content": "<H4>Balance</h4>\nAn Imbalance between shards or nodes may indicates a potential problem"
                  },
                  "fieldConfig": {
                    "defaults": {
                      "custom": {}
                    },
                    "overrides": []
                  },
                  "pluginVersion": "7.3.4",
                  "timeFrom": null,
                  "timeShift": null,
                  "datasource": null
                }]
            },
            {
                "class": "row",
                "panels": [
                    {
                      "class":"advisor_table",
                      "dashversion":">4.1"
                    },
                    {
                      "class":"enterprise_advisor_table",
                      "dashversion":">2019.1"
                    },
                
                    {
                        "class": "small_stat_error",
                        "description": "",
                        "title": "Connections",
                        "targets": [
                            {
                              "expr": "max(abs(sum(scylla_transport_current_connections{cluster=~\"$cluster|$^\", dc=~\"$dc\"}) by (instance,shard)-scalar(avg(scylla_transport_current_connections{cluster=~\"$cluster|$^\", dc=~\"$dc\"})))) - 8",
                              "refId": "A",
                              "hide": false
                            }
                        ],
                        "links": [
                            {
                              "title": "The number of connections per shard should be balanced",
                              "url": "./d/cql-[[dash_version]]/scylla-cql?orgId=1&refresh=30s&var-by=instance,shard&from=$__from&to=$__to"
                            }
                          ]
                    },
                    {
                        "class": "small_stat_error",
                        "description": "",
                        "title": "CQL OPs",
                        "targets": [
                            {
                              "expr": "max(abs(rate(scylla_cql_updates{conditional=\"no\",  dc=~\"$dc\"}[1m]) - on(dc) group_left avg(rate(scylla_cql_updates{conditional=\"no\",  dc=~\"$dc\"}[1m])) by (dc))/on(dc) group_left sum(stddev(rate(scylla_cql_updates{conditional=\"no\",  dc=~\"$dc\"}[1m])) by(dc)+100) by(dc))-3",
                              "legendFormat": "",
                              "interval": "",
                              "refId": "A",
                              "hide": false,
                              "format": "time_series"
                            },
                            {
                              "expr": "max(abs(rate(scylla_cql_inserts{conditional=\"no\",  dc=~\"$dc\"}[1m]) - on(dc) group_left avg(rate(scylla_cql_inserts{conditional=\"no\",  dc=~\"$dc\"}[1m])) by (dc))/on(dc) group_left sum(stddev(rate(scylla_cql_inserts{conditional=\"no\",  dc=~\"$dc\"}[1m])) by(dc)+100) by(dc))-3",
                              "legendFormat": "",
                              "interval": "",
                              "refId": "B",
                              "hide": false
                            },
                            {
                              "expr": "max(abs(rate(scylla_cql_reads{ dc=~\"$dc\"}[1m]) - on(dc) group_left avg(rate(scylla_cql_reads{ dc=~\"$dc\"}[1m])) by (dc))/on(dc) group_left sum(stddev(rate(scylla_cql_reads{ dc=~\"$dc\"}[1m])) by(dc)+100) by(dc))-3",
                              "legendFormat": "",
                              "interval": "",
                              "refId": "C",
                              "hide": false
                            },
                            {
                              "expr": "max(abs(rate(scylla_cql_deletes{conditional=\"no\",  dc=~\"$dc\"}[1m]) - on(dc) group_left avg(rate(scylla_cql_deletes{conditional=\"no\",  dc=~\"$dc\"}[1m])) by (dc))/on(dc) group_left sum(stddev(rate(scylla_cql_deletes{conditional=\"no\",  dc=~\"$dc\"}[1m])) by(dc)+100) by(dc))-3",
                              "legendFormat": "",
                              "interval": "",
                              "refId": "D",
                              "hide": false
                            }
                        ],
                        "links": [
                            {
                              "title": "Indicates that the number of CQL operations (inserts, updates, deletes, reads) is not balance between shards in one of the nodes",
                              "url": "./d/cql-[[dash_version]]/scylla-cql?orgId=1&refresh=30s&var-by=instance,shard&from=$__from&to=$__to"
                            }
                          ]
                    },
                    {
                        "class": "small_stat_error",
                        "description": "",
                        "title": "Node Latency",
                        "targets": [
                            {
                              "expr": "((max(wlatencyp99{by=\"instance\", cluster=~\"$cluster|$^\",scheduling_group_name!=\"streaming\"})-scalar(avg(wlatencyp99{by=\"instance\", cluster=~\"$cluster|$^\",scheduling_group_name!=\"streaming\"}>0)))/(scalar(stddev(wlatencyp99{by=\"instance\", cluster=~\"$cluster|$^\",scheduling_group_name!=\"streaming\"}>0))+100)-3)",
                              "legendFormat": "",
                              "refId": "A"
                            },
                            {
                              "expr": "((max(rlatencyp99{by=\"instance\", cluster=~\"$cluster|$^\",scheduling_group_name!=\"streaming\"})-scalar(avg(rlatencyp99{by=\"instance\", cluster=~\"$cluster|$^\",scheduling_group_name!=\"streaming\"}>0)))/(scalar(stddev(rlatencyp99{by=\"instance\", cluster=~\"$cluster|$^\",scheduling_group_name!=\"streaming\"}>0))+100)-3)",
                              "legendFormat": "",
                              "refId": "B"
                            }
                        ],
                        "links": [
                            {
                              "title": "A single node with higher latency is an indication for a node related issue",
                              "url": "./d/cql-[[dash_version]]/scylla-cql?orgId=1&refresh=30s&var-by=instance,shard&from=$__from&to=$__to"
                            }
                          ]
                    },
                    {
                        "class": "small_stat_error",
                        "description": "",
                        "title": "Shard Latency",
                        "targets": [
                            {
                              "expr": "((max(wlatencyp99{by=\"instance,shard\", cluster=~\"$cluster|$^\",scheduling_group_name!=\"streaming\"})-scalar(avg(wlatencyp99{by=\"instance,shard\", cluster=~\"$cluster|$^\",scheduling_group_name!=\"streaming\"}>0)))/(scalar(stddev(wlatencyp99{by=\"instance,shard\", cluster=~\"$cluster|$^\",scheduling_group_name!=\"streaming\"}>0))+100)-3)",
                              "legendFormat": "",
                              "refId": "A"
                            },
                            {
                              "expr": "((max(rlatencyp99{by=\"instance,shard\", cluster=~\"$cluster|$^\",scheduling_group_name!=\"streaming\"})-scalar(avg(rlatencyp99{by=\"instance,shard\", cluster=~\"$cluster|$^\",scheduling_group_name!=\"streaming\"}>0)))/(scalar(stddev(rlatencyp99{by=\"instance,shard\", cluster=~\"$cluster|$^\",scheduling_group_name!=\"streaming\"}>0))+100)-3)",
                              "legendFormat": "",
                              "refId": "B"
                            }
                        ],
                        "links": [
                            {
                              "title": "A single shard with high latency is an indication of a hot-partition, or a large row/cell/partition",
                              "url": "./d/cql-[[dash_version]]/scylla-cql?orgId=1&refresh=30s&var-by=instance,shard&from=$__from&to=$__to"
                            }
                          ]
                    },
                    {
                        "class": "small_stat_error",
                        "description": "A shard that reads more from the cache could be an indication for hot partition",
                        "title": "Cache",
                        "targets": [
                            {
                                "expr": "((rate(scylla_cache_reads{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m]) - rate(scylla_cache_reads_with_misses{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m]))- scalar(avg(rate(scylla_cache_reads{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m]) - rate(scylla_cache_reads_with_misses{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m]))))/scalar(stddev(rate(scylla_cache_reads{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m]) - rate(scylla_cache_reads_with_misses{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m]))+100)-3",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ]
                    },
                    {
                        "class": "small_stat_error",
                        "description": "A single shard that reads more from sstables, could be that a node is slow",
                        "title": "SSTable",
                        "targets": [
                            {
                                "expr": "max(abs(scylla_database_active_reads{ dc=~\"$dc\"} - scalar(avg(scylla_database_active_reads{ dc=~\"$dc\"})))/scalar(stddev(scylla_database_active_reads{ dc=~\"$dc\"})+0.001))-3",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ]
                    }
                ]
            },
            {
                "class": "row",
                "panels": [
                    {
                      "collapsed": false,
                      "datasource": null,
                      "id": "auto",
                      "gridPos": {
                        "h": 1,
                        "w": 24
                      },
                      "panels": [],
                      "title": "",
                      "repeat": "dc",
                      "type": "row"
                    }
                ]
            },
            {
                "class": "header_row",
                "panels": [
                    {
                        "class": "plain_text",
                        "content": "<h1 style=\"color:#5780C1; border-bottom: 3px solid #5780C1;\">Information for $dc</h1>"
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "vertical_lcd",
                        "targets": [
                            {
                              "expr": "avg(scylla_reactor_utilization{cluster=~\"$cluster\", dc=~\"$dc\"} )",
                              "interval": "",
                              "legendFormat": "",
                              "instant": true,
                              "refId": "A"
                            }
                          ],
                          "title": "Load"
                    },
                    {
                        "class": "bytes_panel",
                        "gridPos": {
                        "w": 3
                        },
                        "targets": [
                            {
                                "expr": "Avg(node_filesystem_size_bytes{mountpoint=\"$mount_point\", dc=~\"$dc\"}) by ([[by]])-avg(node_filesystem_avail_bytes{mountpoint=\"$mount_point\",  dc=~\"$dc\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "Avg Usage {{[[by]]}}",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            },
                            {
                              "expr": "avg(node_filesystem_size_bytes{mountpoint=\"$mount_point\", dc=~\"$dc\"}) by ([[by]])",
                              "legendFormat": "Size {{[[by]]}}",
                              "interval": "",
                              "refId": "B"
                            }
                        ],
                        "title": "Disk Size by $by"
                    },
                    {
                        "class": "graph_panel_int",
                        "span": 2,
                        "targets": [
                            {
                                "expr": "$func(scylla_compaction_manager_compactions{cluster=~\"$cluster|$^\", dc=~\"$dc\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Running Compactions"
                    },
                    {
                        "class": "ops_panel",
                        "description": "The Hits and Misses",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_cache_row_hits{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "Hit {{[[by]]}}",
                                "refId": "A",
                                "step": 10
                            },
                            {
                                "expr": "$func(rate(scylla_cache_row_misses{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "Misses {{[[by]]}}",
                                "refId": "B",
                                "step": 10
                            }
                        ],
                        "legend": {
                            "class": "show_legend"
                        },
                        "title": "Cache Rows Hits/Misses"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_storage_proxy_coordinator_write_latency_count{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "Writes",
                                "refId": "A",
                                "step": 1
                            },
                            {
                              "expr": "$func(rate(scylla_storage_proxy_coordinator_write_latency_count{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m] offset 1d))",
                              "legendFormat": "1 Day Ago",
                              "interval": "",
                              "intervalFactor": 1,
                              "refId": "B",
                              "step": 1
                            },
                            {
                              "expr": "$func(rate(scylla_storage_proxy_coordinator_write_latency_count{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m] offset 1w))",
                              "legendFormat": "1 Week Ago",
                              "interval": "",
                              "intervalFactor": 1,
                              "refId": "C",
                              "step": 1
                            }
                        ],
                        "legend": {
                            "class": "show_legend"
                        },
                        "seriesOverrides": [
                            {
                              "alias": "1 Day Ago",
                              "dashes": true,
                              "dashLength": 4
                            },
                            {
                              "alias": "1 Week Ago",
                              "dashes": true,
                              "dashLength": 2
                            }
                          ],
                        "description": "Write attempts - include all writes that reached the coordinator node, even if they will eventually fail",
                        "title": "Writes"
                    },
                    {
                        "class": "us_panel",
                        "span": 2,
                        "targets": [
                            {
                                "expr": "avg(wlatencyp95{by=\"[[by]]\", cluster=~\"$cluster|$^\", dc=~\"$dc\",scheduling_group_name!=\"streaming\"}>0) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "95% {{[[by]]}}",
                                "refId": "A",
                                "step": 1
                            },
                            {
                                "expr": "avg(wlatencyp99{by=\"[[by]]\", cluster=~\"$cluster|$^\", dc=~\"$dc\",scheduling_group_name!=\"streaming\"}>0) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "99% {{[[by]]}}",
                                "refId": "B",
                                "step": 1
                            }
                        ],
                        "legend": {
                            "class": "show_legend"
                        },
                        "title": "Write Latencies"
                    },
                    {
                        "class": "ops_panel",
                        "description": "Requests that Scylla tried to write but timed out. Timeouts are counted in the node that received the request (the coordinator), not at the replicas.",
                        "span": 2,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_storage_proxy_coordinator_write_timeouts{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "Writes {{[[by]]}}",
                                "refId": "A",
                                "step": 10
                            }
                        ],
                        "legend": {
                            "class": "show_legend"
                        },
                        "title": "Write Timeouts by [[by]]"
                    },
                    {
                        "class": "ops_panel",
                        "description": "Requests that Scylla tried to read but timed out. Timeouts are counted in the node that received the request (the coordinator), not at the replicas.",
                        "span": 2,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_storage_proxy_coordinator_read_timeouts{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])+rate(scylla_storage_proxy_coordinator_cas_read_timeouts{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])+rate(scylla_storage_proxy_coordinator_range_timeouts{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "Read  {{[[by]]}}",
                                "refId": "A",
                                "step": 10
                            }
                        ],
                        "legend": {
                            "class": "show_legend"
                        },
                        "title": "Read Timeouts by [[by]]"
                    },
                    {
                        "class": "ops_panel",
                        "description": "The Hits and Misses",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_cache_reads{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]])-$func(rate(scylla_cache_reads_with_misses{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "Hit {{[[by]]}}",
                                "refId": "A",
                                "step": 10
                            },
                            {
                                "expr": "$func(rate(scylla_cache_reads_with_misses{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "Misses {{[[by]]}}",
                                "refId": "B",
                                "step": 10
                            }
                        ],
                        "legend": {
                            "class": "show_legend"
                        },
                        "title": "Cache Reads Hits/Misses"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_storage_proxy_coordinator_read_latency_count{cluster=~\"$cluster|$^\", dc=~\"$dc\",scheduling_group_name!=\"streaming\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "Reads",
                                "refId": "A",
                                "step": 1
                            },
                            {
                                "expr": "$func(rate(scylla_storage_proxy_coordinator_read_latency_count{cluster=~\"$cluster|$^\", dc=~\"$dc\",scheduling_group_name!=\"streaming\"}[1m] offset 1d))",
                                "intervalFactor": 1,
                                "legendFormat": "1 Day Ago",
                                "refId": "B",
                                "step": 1
                            },
                            {
                                "expr": "$func(rate(scylla_storage_proxy_coordinator_read_latency_count{cluster=~\"$cluster|$^\", dc=~\"$dc\",scheduling_group_name!=\"streaming\"}[1m] offset 1w))",
                                "intervalFactor": 1,
                                "legendFormat": "1 Week Ago",
                                "refId": "C",
                                "step": 1
                            }
                        ],
                        "legend": {
                            "class": "show_legend"
                        },
                        "seriesOverrides": [
                            {
                              "alias": "1 Day Ago",
                              "dashes": true,
                              "dashLength": 4
                            },
                            {
                              "alias": "1 Week Ago",
                              "dashes": true,
                              "dashLength": 2
                            }
                          ],
                        "description": "Read attempts - include all reads that reached the coordinator node, even if they will eventually fail",
                        "title": "Reads"
                    },
                    {
                        "class": "us_panel",
                        "span": 2,
                        "targets": [
                            {
                                "expr": "avg(rlatencyp95{by=\"[[by]]\", cluster=~\"$cluster|$^\", dc=~\"$dc\",scheduling_group_name!=\"streaming\"}>0) by([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "95% {{[[by]]}}",
                                "refId": "A",
                                "step": 1
                            },
                            {
                                "expr": "avg(rlatencyp99{by=\"[[by]]\", cluster=~\"$cluster|$^\", dc=~\"$dc\",scheduling_group_name!=\"streaming\"}>0) by([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "99% {{[[by]]}}",
                                "refId": "B",
                                "step": 1
                            }
                        ],
                        "legend": {
                            "class": "show_legend"
                        },
                        "title": "Read Latencies"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(rate(scylla_cql_inserts{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]]) - sum(rate(scylla_cql_inserts_per_ks{cluster=~\"$cluster|$^\", dc=~\"$dc\", who=\"internal\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Number of CQL INSERT commands generated by the user",
                        "title": "CQL Insert"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(rate(scylla_cql_reads{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]]) - sum(rate(scylla_cql_reads_per_ks{cluster=~\"$cluster|$^\", dc=~\"$dc\", who=\"internal\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Number of CQL SELECT commands generated by the user",
                        "title": "CQL Reads"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(rate(scylla_cql_deletes{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]])-sum(rate(scylla_cql_deletes_per_ks{cluster=~\"$cluster|$^\", dc=~\"$dc\", who=\"internal\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Number of CQL DELETE commands generated by the user",
                        "title": "CQL Deletes"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(rate(scylla_cql_updates{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]])-sum(rate(scylla_cql_updates_per_ks{cluster=~\"$cluster|$^\", dc=~\"$dc\", who=\"internal\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Number of CQL UPDATE commands generated by the user",
                        "title": "CQL Updates"
                    },
                    {
                        "class": "graph_panel",
                        "span": 3,
                        "pointradius": 1,
                        "targets": [
                            {
                                "expr": "sum(scylla_transport_current_connections{cluster=~\"$cluster|$^\", dc=~\"$dc\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 30
                            }
                        ],
                        "title": "Client CQL connections by [[by]]",
                        "description": "amount of CQL connections currently established"
                    },
                    {
                        "class": "graph_panel",
                        "span": 3,
                        "pointradius": 1,
                        "targets": [
                            {
                                "expr": "sum(rate(scylla_cql_batches{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 30
                            }
                        ],
                        "title": "CQL Batches by [[by]]",
                        "description": "Number of CQL batches command, each batched command is counted once"
                    },
                    {
                        "class": "graph_panel",
                        "span": 3,
                        "pointradius": 1,
                        "targets": [
                            {
                                "expr": "sum(rate(scylla_cql_statements_in_batches{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 30
                            }
                        ],
                        "title": "CQL Command In Batches by [[by]]",
                        "description": "Number of CQL command batched. Each batch would add the number of commands inside the batch"
                    },
                    {
                        "class": "ops_panel",
                        "description": "Counts the number of SELECT statements with BYPASS CACHE option",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "sum(rate(scylla_cql_select_bypass_caches{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]])",
                                "format": "time_series",
                                "hide": false,
                                "intervalFactor": 2,
                                "refId": "A"
                            }
                        ],
                        "title": "BYPASS CACHE"
                    },
                    {
                        "class": "graph_panel",
                        "span": 3,
                        "pointradius": 1,
                        "targets": [
                            {
                                "expr": "sum(rate(scylla_transport_cql_errors_total{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]],type) >0",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 30
                            }
                        ],
                        "title": "CQL Errors [[by]]",
                        "description": "CQL errors by type, only active errors are shown",
                        "dashversion":[">4.4", ">2021.1"]
                    },
                    {
                        "class": "graph_panel",
                        "span": 3,
                        "pointradius": 1,
                        "targets": [
                            {
                                "expr": "sum(rate(scylla_cql_rows_read{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 30
                            }
                        ],
                        "title": "CQL Row Reads [[by]]",
                        "description": "Number of CQL row reads"
                    },
                    {
                        "class": "graph_panel",
                        "span": 3,
                        "pointradius": 1,
                        "targets": [
                            {
                                "expr": "sum(rate(scylla_cql_secondary_index_reads{cluster=~\"$cluster|$^\", dc=~\"$dc\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 30
                            }
                        ],
                        "title": "Secondary indexes Reads [[by]]",
                        "description": "Number of reads using secondary indexes"
                    }
                ]
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "collapsible_row_panel",
                        "title": "Your panels"
                    }
                ]
            },
            {
                "class": "user_panel_row_header"
            },
            {
                "class": "user_panels_row"
            },
            {
                "class": "monitoring_version_row"
            }
        ],
        "tags": [
            "__SCYLLA_VERSION_DOT__"
        ],
        "templating": {
            "list": [
                {
                    "class": "by_template_var",
                    "current": {
                        "tags": [],
                        "text": "DC",
                        "value": "dc"
                    },
                    "options": [
                        {
                            "selected": false,
                            "text": "Cluster",
                            "value": "cluster"
                        },
                        {
                            "selected": true,
                            "text": "DC",
                            "value": "dc"
                        }
                    ]
                },
                {
                    "class": "template_variable_single",
                    "label": "cluster",
                    "name": "cluster",
                    "query": "label_values(scylla_reactor_utilization, cluster)"
                },
                {
                    "class": "template_variable_all",
                    "label": "dc",
                    "name": "dc",
                    "query": "label_values(scylla_reactor_utilization{cluster=~\"$cluster\"}, dc)"
                },
                {
                    "class": "aggregation_function"
                },
                {
                    "class": "template_variable_custom",
                    "current": {
                        "text": "__SCYLLA_VERSION_DASHED__",
                        "value": "__SCYLLA_VERSION_DASHED__"
                    },
                    "name": "dash_version",
                    "options": [
                        {
                            "selected": true,
                            "text": "__SCYLLA_VERSION_DASHED__",
                            "value": "__SCYLLA_VERSION_DASHED__"
                        }
                    ],
                    "query": "__SCYLLA_VERSION_DASHED__"
                },
                {
                    "class": "template_variable_all",
                    "hide":2,
                    "name": "all_scyllas_versions",
                    "query": "label_values(scylla_scylladb_current_version{cluster=~\"$cluster|$^\"}, version)"
                },
                {
                    "class": "template_variable_all",
                    "hide":2,
                    "name": "count_dc",
                    "definition": "query_result(count(up{job=\"scylla\"}) by (dc))",
                    "query": {
                      "query": "query_result(count(up{job=\"scylla\"}) by (dc))",
                      "refId": "StandardVariableQuery"
                    },
                    "regex": "/(?<dc>\\{dc=\"[^\"]+\".* \\d+) .*/"
                },
                {
                    "class": "template_variable_custom",
                    "current": {
                        "text": "__SCYLLA_VERSION_DOT__",
                        "value": "__SCYLLA_VERSION_DOT__"
                    },
                    "name": "scylla_version",
                    "options": [
                        {
                            "selected": true,
                            "text": "__SCYLLA_VERSION_DOT__",
                            "value": "__SCYLLA_VERSION_DOT__"
                        }
                    ],
                    "query": "__SCYLLA_VERSION_DOT__"
                },
                {
                    "class": "monitor_version_var"
                }
            ]
        },
        "time": {
            "from": "now-30m",
            "to": "now"
        },
        "title": "CQL Overview",
        "uid": "cql-overview-__SCYLLA_VERSION_DASHED__",
        "annotations":{
         "list":[
             {
                "builtIn":1,
                "datasource":"-- Grafana --",
                "enable":true,
                "hide":true,
                "iconColor":"rgba(0, 211, 255, 1)",
                "name":"Annotations & Alerts",
                "type":"dashboard"
             },
             {
                "class":"annotation_manager_task"
             },
             {
                "class":"mv_building"
             },
             {
                "class":"ops_annotation"
             },
             {
                "class":"annotation_schema_changed"
             }
    
          ]
        },
        "version": 1
    }
}
